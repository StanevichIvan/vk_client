'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {
    // window.location = 'https://oauth.vk.com/authorize?client_id=5971236&redirect_uri=blank.html&scope=friends,messages,offline&response_type=token
    var token = 'e0a516acf85bd19935b1dc330e50893ea86afa56e804906c869040d2d1e651031767ae8a1ce03c8926417';
    var baseURL = 'http://localhost:5000/';

    /**
     *
     * @returns {Promise}
     */
    var getDialogs = function getDialogs() {
        var dialogs = void 0;

        return fetch(baseURL + 'method/messages.getDialogs?access_token=' + token, { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (res) {
            return res.response;
        }).then(function (json) {
            var idList = json.map(function (item) {
                if (item.uid) return item.uid;
                return '';
            });
            dialogs = json;
            return getUsersProfiles(idList);
        }).then(function (res) {
            return res.json();
        }).then(function (res) {
            return mergeDialogsInfo(res.response, dialogs);
        });
    };

    /**
     * Merge data from two requests
     * @param userData {Array}
     * @param dialogs {Array}
     * @returns {Array}
     */
    var mergeDialogsInfo = function mergeDialogsInfo(userData, dialogs) {
        var diaolgsBundle = [];

        dialogs.forEach(function (item) {
            if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') {
                userData.forEach(function (user) {
                    if (item.uid === user.uid) {
                        var resObj = Object.assign({}, item);
                        resObj['user'] = user;
                        diaolgsBundle.push(new Dialog(resObj));
                    }
                });
            }
        });
        return diaolgsBundle;
    };

    /**
     * Loads user data from vk server
     * @param listOfIds
     * @returns {Promise}
     */
    var getUsersProfiles = function getUsersProfiles(listOfIds) {
        return fetch(baseURL + 'method/users.get?access_token=' + token + "&fields=" + "photo_50" + "&user_ids=" + listOfIds, { method: 'GET' });
    };

    /**
     * Get messages from user
     * @returns {*}
     */
    var getMessages = function getMessages(uid) {
        return fetch(baseURL + 'method/messages.getHistory?access_token=' + token + '&count=200&time_offset=0&user_id=' + uid, { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (res) {
            return res.response;
        }).then(function (messagesList) {
            return messagesList.map(function (item) {
                return new Dialog(item);
            });
        });
    };

    /**
     * Send message to user with id
     * @param uid
     * @param message
     * @returns {*}
     */
    function sendMessage(uid, message) {
        return fetch(baseURL + 'method/messages.send?access_token=' + token + '&user_id=' + uid + '&message=' + message, { method: 'POST' });
    }

    var getFriends = function getFriends() {
        return fetch(baseURL + 'method/friends.get?access_token=' + token + '&fields=photo_50,last_seen,nickname', { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (res) {
            return res.response.map(function (item) {
                return new User(item);
            });
        });
    };

    function User(item) {
        this.firstName = item.first_name || '';
        this.lastName = item.last_name || '';
        this.photo = item.photo_50 || '';
        this.lastSeen = item.last_seen || '';
        this.nickname = item.nickname || '';
        this.id = item.uid || 0;
    }

    function Dialog(item) {
        this.body = item.body || '';
        this.out = item.out || 0;
        this.user = item.user ? new User(item.user) : null;
    }

    if (!window.app) window.app = {};

    app.xhrService = {
        getDialogs: getDialogs,
        getUsersProfiles: getUsersProfiles,
        getMessages: getMessages,
        sendMessage: sendMessage,
        getFriends: getFriends
    };
})();