'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {
    // window.location = 'https://oauth.vk.com/authorize?client_id=5971236&redirect_uri=blank.html&scope=friends,messages,offline&response_type=token
    var token = '';
    var baseURL = 'http://localhost:5000/';
    var longPollCredentials = {
        server: '',
        key: '',
        ts: ''
    };

    /**
     *
     * @returns {Promise}
     */
    var getDialogs = function getDialogs() {
        var dialogs = void 0;

        return fetch(baseURL + 'method/messages.getDialogs?access_token=' + token, { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (res) {
            return res.response;
        }).then(function (json) {
            var idList = json.map(function (item) {
                if (item.uid) return item.uid;
                return '';
            });
            dialogs = json;
            return getUsersProfiles(idList);
        }).then(function (res) {
            return res.json();
        }).then(function (res) {
            return mergeDialogsInfo(res.response, dialogs);
        });
    };

    /**
     * Merge data from two requests
     * @param userData {Array}
     * @param dialogs {Array}
     * @returns {Array}
     */
    var mergeDialogsInfo = function mergeDialogsInfo(userData, dialogs) {
        var diaolgsBundle = [];

        dialogs.forEach(function (item) {
            if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') {
                userData.forEach(function (user) {
                    if (item.uid === user.uid) {
                        var resObj = Object.assign({}, item);
                        resObj['user'] = user;
                        diaolgsBundle.push(new Dialog(resObj));
                    }
                });
            }
        });
        return diaolgsBundle;
    };

    /**
     * Loads user data from vk server
     * @param listOfIds
     * @returns {Promise}
     */
    var getUsersProfiles = function getUsersProfiles(listOfIds) {
        return fetch(baseURL + 'method/users.get?access_token=' + token + "&fields=" + "photo_50" + "&user_ids=" + listOfIds, { method: 'GET' });
    };

    /**
     * Get messages from user
     * @returns {*}
     */
    var getMessages = function getMessages(uid) {
        return fetch(baseURL + 'method/messages.getHistory?access_token=' + token + '&count=200&time_offset=0&user_id=' + uid, { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (res) {
            return res.response;
        }).then(function (messagesList) {
            return messagesList.map(function (item) {
                return new Dialog(item);
            });
        });
    };

    /**
     * Send message to user with id
     * @param uid
     * @param message
     * @returns {*}
     */
    function sendMessage(uid, message) {
        return fetch(baseURL + 'method/messages.send?access_token=' + token + '&user_id=' + uid + '&message=' + message, { method: 'POST' });
    }

    var getFriends = function getFriends() {
        return fetch(baseURL + 'method/friends.get?access_token=' + token + '&fields=photo_50,last_seen,nickname', { method: 'GET' }).then(function (res) {
            return res.json();
        }).then(function (res) {
            return res.response.map(function (item) {
                return new User(item);
            });
        });
    };

    var longPoll = function longPoll() {

        var xhr = new XMLHttpRequest();
        xhr.open("GET", baseURL + 'method/messages.getLongPollServer?access_token=' + token, true);
        xhr.send();
        xhr.addEventListener("load", function () {
            if (this.status === 200) {
                longPollCredentials = JSON.parse(this.responseText).response;
                var _xhr = new XMLHttpRequest();
                _xhr.open("GET", 'https://' + longPollCredentials.server + '?act=a_check&key=' + longPollCredentials.key + '&ts=' + longPollCredentials.ts + '&wait=25&mode=2&version=1', true);
                _xhr.send();
                _xhr.addEventListener('load', function () {
                    console.log(this);
                });

                subscribe(baseURL + 'nim0800?act=a_check&key=' + longPollCredentials.key + '&ts=' + longPollCredentials.ts + '&wait=25&mode=2&version=1');
            }
        });

        function subscribe(url) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState !== 4) return;

                if (this.status === 200) {
                    var respData = JSON.parse(this.responseText);
                    longPollCredentials.ts = respData.ts; // update timestamp

                    if (respData.updates) {
                        if (respData.updates.length !== 0) {

                            var messages = [];
                            // grab only new messages

                            respData.updates.forEach(function (item) {
                                if (item[0] === 4) {
                                    messages.push(item);
                                }
                            });
                            window.app.messagesObserver.fire(messages);
                        }
                    }
                } else {}
                // new subscription with updated timestamp
                subscribe(baseURL + 'nim0800?act=a_check&key=' + longPollCredentials.key + '&ts=' + longPollCredentials.ts + '&wait=25&mode=2&version=1');
            };
            xhr.open("GET", url, true);
            xhr.send();
        }
    };

    function User(item) {
        this.firstName = item.first_name || '';
        this.lastName = item.last_name || '';
        this.photo = item.photo_50 || '';
        this.lastSeen = item.last_seen || '';
        this.nickname = item.nickname || '';
        this.id = item.uid || 0;
    }

    function Dialog(item) {
        this.body = item.body || '';
        this.out = item.out || 0;
        this.user = item.user ? new User(item.user) : null;
    }

    if (!window.app) window.app = {};

    app.model = {};
    app.model.Dialog = Dialog;
    app.model.User = User;

    app.xhrService = {
        getDialogs: getDialogs,
        getUsersProfiles: getUsersProfiles,
        getMessages: getMessages,
        sendMessage: sendMessage,
        getFriends: getFriends,
        longPoll: longPoll
    };
})();