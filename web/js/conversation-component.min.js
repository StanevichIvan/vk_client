'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {

    var vkService = window.app.xhrService;

    /**
     * @param mountNode
     * @constructor
     */
    function Conversations(mountNode) {
        var _this = this;

        this.mountNode = mountNode;
        this.showDialogs();

        this.activeRequest;

        this.messageInterval = {};
        document.getElementById("chart-form").addEventListener('submit', function (event) {
            event.preventDefault();
            var message = event.target.message.value;
            var id = event.target.dataset.id;
            vkService.sendMessage(id, message).then(function (res) {
                _this.showUserMessages(id);
            });
        });

        document.getElementById('dialogs-container').addEventListener('click', function (event) {
            var uid = event.target.closest('.conversation__message').dataset.id;
            _this.showUserMessages(uid);

            clearInterval(_this.messageInterval);
            _this.messageInterval = setInterval(function () {
                _this.showUserMessages(uid);
            }, 2000);
        });

        this.destroy = function () {
            clearInterval(this.messageInterval);
            document.getElementById('dialogs-container').innerHTML = '';
            document.getElementById('messages-container').innerHTML = '';
        };
    }

    /**
     * Shows dialogs into container
     * @param data
     */
    Conversations.prototype.showDialogs = function () {
        var _this2 = this;

        vkService.getDialogs().then(function (res) {
            _this2.renderDialogs(res);
        }).catch(function (err) {
            alert(err);
        });
    };

    Conversations.prototype.renderDialogs = function renderDialogs(data) {
        document.getElementById('dialogs-container').appendChild(this.createListFragment(data, dialogRender));
    };

    /**
     * Create document fragment from list
     * @param data {Vk_API_data}
     * @returns {DocumentFragment}
     */
    Conversations.prototype.createListFragment = function (data, nodeCreateFn) {

        var fragment = document.createDocumentFragment();

        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            // fragment.appendChild(nodeCreateFn(`${user.first_name} ${user.last_name}`, user.photo_50));
            fragment.appendChild(nodeCreateFn(item));
        }
        return fragment;
    };

    Conversations.prototype.showUserMessages = function (uid) {
        var _this3 = this;

        document.getElementById('chart-form').dataset.id = uid;

        vkService.getMessages(uid).then(function (messages) {
            _this3.renderMesasges(messages);
        });
    };

    Conversations.prototype.renderMesasges = function (messages) {
        var container = document.getElementById('messages-container');
        container.innerHTML = "";
        container.appendChild(this.createListFragment(messages.reverse(), messageRender));
        container.scrollTop = container.scrollHeight;
    };

    /**
     *
     * @returns {Element}
     */
    var messageRender = function messageRender(message) {
        var div = document.createElement('div');

        if ((typeof message === 'undefined' ? 'undefined' : _typeof(message)) !== 'object') {
            return div;
        }
        // skip link messages
        if (message.body.length === 0) {
            div.style.display = 'none';
            return div;
        }

        div.className += "chart-message";
        if (message.out === 1) {
            div.className += " mine";
        }

        div.innerHTML = '<div class="chart-message__avatar">\n                            <div class="chart-message__avatar-content active">\n                                <img src="images/photo.png">\n                                <div class="chart-message__controls">\n                                    <span class="chart-message__control chart-message__control_star"></span>\n                                    <span class="chart-message__control chart-message__control_share"></span>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="chart-message__time">\n                            <!--<span>15 sec.</span>-->\n                        </div>\n                        <div class="chart-message__content">\n                            <p class="chart-message__text">\n                               ' + message.body + '\n                            </p>\n\n                        </div>';

        return div;
    };

    /**
     * render dom element for message
     * @param dialog
     * @returns {Element}
     */
    var dialogRender = function dialogRender(dialog) {
        var div = document.createElement('div');

        if ((typeof dialog === 'undefined' ? 'undefined' : _typeof(dialog)) !== 'object') return div;

        div.dataset.id = dialog.user.id;
        div.className += "conversation__message new";
        div.innerHTML = '<img class="conversation__avatar" src="' + dialog.user.photo + '">\n                            <div class="conversation__message-info">\n                                <h4 class="conversation__name">' + dialog.user.firstName + ' ' + dialog.user.lastName + '</h4>\n                                <p class="conversation__message-text">' + dialog.body + '</p>\n                            </div>\n                            <div class="conversation__message-info">\n                                <h4 class="conversation__name conversation__name_right">\n                                    <span class="conversation__message-count">' + dialog.out + '</span>\n                                    <span class="conversation__message-time">1 min</span>\n                                </h4>\n                                <p class="conversation__message-text conversation__name_right"><i\n                                        class="conversation__attachment"></i></p>\n                            </div>';
        return div;
    };

    app.conversationComponent = Conversations;
})();